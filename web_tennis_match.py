import streamlit as st
import random
import pandas as pd
import datetime
from collections import defaultdict, Counter

st.set_page_config(page_title="üéæ ÌÖåÎãàÏä§ Îß§Ïπ≠ ÏãúÏä§ÌÖú", layout="centered")
st.title("üéæ ÌÖåÎãàÏä§ ÎåÄÏßÑÌëú ÏÉùÏÑ± ÏãúÏä§ÌÖú")

# ---------- Ï∞∏Í∞ÄÏûê Îì±Î°ù ----------
if "players" not in st.session_state:
    st.session_state.players = []
if "match_list" not in st.session_state:
    st.session_state.match_list = []
if "score_record" not in st.session_state:
    st.session_state.score_record = defaultdict(lambda: {"Ïäπ":0, "Ìå®":0, "ÎìùÏ†ê":0, "Ïã§Ï†ê":0})

with st.expander("1. Ï∞∏Í∞ÄÏûê Îì±Î°ù", expanded=True):
    with st.form("add_player", clear_on_submit=True):
        name = st.text_input("Ïù¥Î¶Ñ ÏûÖÎ†•")
        gender = st.radio("ÏÑ±Î≥Ñ", ["ÎÇ®", "Ïó¨"], horizontal=True)
        career = st.selectbox("Íµ¨Î†•(ÎÖÑÏàò)", list(range(1, 11)), format_func=lambda x: f"{x}ÎÖÑ")
        submitted = st.form_submit_button("Ï∂îÍ∞Ä")
        if submitted and name:
            st.session_state.players.append({"name": name.strip(), "gender": gender, "career": career})
    if st.session_state.players:
        st.subheader("‚úÖ ÌòÑÏû¨ Ï∞∏Í∞ÄÏûê Î™©Î°ù")
        for i, p in enumerate(st.session_state.players):
            col1, col2 = st.columns([7, 1])
            col1.markdown(f"- {p['name']} ({p['gender']}, {p['career']}ÎÖÑ)")
            if col2.button("‚ùå", key=f"del_{i}"):
                st.session_state.players.pop(i)
                st.rerun()
        st.caption(f"Ï∞∏Í∞ÄÏûê Ïàò: {len(st.session_state.players)}")
        if st.button("üö´ Ï∞∏Í∞ÄÏûê Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî"):
            st.session_state.players.clear()
            st.session_state.match_list.clear()
            st.session_state.score_record.clear()
            st.rerun()

# ---------- Í≤ΩÍ∏∞ ÏÑ§Ï†ï ----------
with st.expander("2. Í≤ΩÍ∏∞ Ïú†ÌòïÎ≥Ñ ÏÑ∏Î∂Ä ÏÑ§Ï†ï", expanded=True):
    st.markdown("Í≤ΩÍ∏∞ Ïú†ÌòïÎ≥Ñ Í≤ΩÍ∏∞ ÏàòÎ•º Í∞ÅÍ∞Å ÏûÖÎ†•ÌïòÏÑ∏Ïöî.")
    num_men_doubles = st.number_input("ÎÇ®Ïûê Î≥µÏãù Í≤ΩÍ∏∞ Ïàò", min_value=0, max_value=20, value=2)
    num_women_doubles = st.number_input("Ïó¨Ïûê Î≥µÏãù Í≤ΩÍ∏∞ Ïàò", min_value=0, max_value=20, value=2)
    num_mixed_doubles = st.number_input("ÌòºÏÑ± Î≥µÏãù Í≤ΩÍ∏∞ Ïàò", min_value=0, max_value=20, value=2)
    num_courts = st.number_input("ÏΩîÌä∏ Ïàò", min_value=1, value=2)
    start_time = st.time_input("Í≤ΩÍ∏∞ ÏãúÏûë ÏãúÍ∞Ñ", value=datetime.time(9, 0))

# ---------- ÌéòÏñ¥ÎßÅ(Íµ¨Î†• Í∏∞Î∞ò, ÌéòÏñ¥ Ï§ëÎ≥µ Ï†úÌïú) ----------
def get_unique_pairs(players):
    # Íµ¨Î†• Í∏∞Î∞òÏúºÎ°ú, ÌéòÏñ¥ Ï§ëÎ≥µ ÏóÜÏù¥ Í∞ÄÎä•Ìïú Î™®Îì† ÌéòÏñ¥ Íµ¨ÌïòÍ∏∞
    sorted_players = sorted(players, key=lambda p: p['career'])
    n = len(sorted_players)
    pairs = []
    used = set()
    for i in range(n):
        for j in range(i+1, n):
            pair = tuple(sorted([sorted_players[i]['name'], sorted_players[j]['name']]))
            if pair not in used:
                pairs.append(pair)
                used.add(pair)
    random.shuffle(pairs)
    return pairs

def get_unique_mixed_pairs(males, females):
    # ÎÇ®1+Ïó¨1 ÌéòÏñ¥Î°ú, Ï§ëÎ≥µ ÏóÜÎäî Í∞ÄÎä•Ìïú Î™®Îì† ÌéòÏñ¥ Íµ¨ÌïòÍ∏∞
    pairs = []
    used = set()
    for m in males:
        for f in females:
            pair = (m['name'], f['name'])
            if pair not in used:
                pairs.append(pair)
                used.add(pair)
    random.shuffle(pairs)
    return pairs

# ---------- Í≤ΩÍ∏∞ Ïä§ÏºÄÏ§ÑÎßÅ Ìï®Ïàò (ÌéòÏñ¥ Ï§ëÎ≥µ Ï†úÌïú, 3Ïó∞ÏÜç Ï∂úÏ†Ñ Í∏àÏßÄ) ----------
def schedule_matches_with_strict_constraints(
    men, women, n_men_d, n_women_d, n_mix_d, num_courts, start_time):

    games = []
    court_cycle = [i+1 for i in range(num_courts)]
    base_time = datetime.datetime.combine(datetime.date.today(), start_time)
    match_history = []
    # 1. ÎÇ®Î≥µ ÌéòÏñ¥ Î™©Î°ù ÎßåÎì§Í∏∞
    men_objs = [p for p in st.session_state.players if p['name'] in men]
    men_pairs = get_unique_pairs(men_objs)
    men_pairs_cycle = men_pairs.copy()
    # 2. Ïó¨Î≥µ ÌéòÏñ¥ Î™©Î°ù ÎßåÎì§Í∏∞
    women_objs = [p for p in st.session_state.players if p['name'] in women]
    women_pairs = get_unique_pairs(women_objs)
    women_pairs_cycle = women_pairs.copy()
    # 3. ÌòºÎ≥µ ÌéòÏñ¥ Î™©Î°ù ÎßåÎì§Í∏∞
    mixed_pairs = get_unique_mixed_pairs(men_objs, women_objs)
    mixed_pairs_cycle = mixed_pairs.copy()

    # 4. Í∞Å Ïú†ÌòïÎ≥ÑÎ°ú Í≤ΩÍ∏∞ Ïàò ÎßåÌÅº ÌéòÏñ¥ Ï°∞Ìï©
    all_types = (
        [("ÎÇ®Ïûê Î≥µÏãù", men_pairs_cycle, men_pairs)] * n_men_d +
        [("Ïó¨Ïûê Î≥µÏãù", women_pairs_cycle, women_pairs)] * n_women_d +
        [("ÌòºÏÑ± Î≥µÏãù", mixed_pairs_cycle, mixed_pairs)] * n_mix_d
    )
    random.shuffle(all_types)

    # Í∞Å Ï∞∏Í∞ÄÏûêÏùò "ÏµúÍ∑º 2Í≤ΩÍ∏∞ Í∏∞Î°ù"ÏùÑ ÏúÑÌïú ÌÅê
    recent_games = defaultdict(list)  # name -> [Í≤ΩÍ∏∞index...]

    # 5. Í≤ΩÍ∏∞ ÏÉùÏÑ±
    for idx, (gtype, pair_cycle, pair_master) in enumerate(all_types):
        attempt = 0
        max_attempts = 1000
        found = False
        while attempt < max_attempts:
            attempt += 1
            if len(pair_cycle) < 2:
                # ÌéòÏñ¥Í∞Ä Î™®ÏûêÎùºÎ©¥ masterÏóêÏÑú Ïû¨Ï∂©Ï†Ñ(Ï§ëÎ≥µ ÌéòÏñ¥ ÌóàÏö©)
                pair_cycle.extend(pair_master)
                random.shuffle(pair_cycle)
            # ÎûúÎç§ÌïòÍ≤å Îëê ÌåÄ Ï∂îÏ∂ú
            p1 = pair_cycle.pop()
            p2 = pair_cycle.pop()
            if set(p1) & set(p2):  # Ìïú ÌåÄÏóê Ï§ëÎ≥µ Î©§Î≤Ñ ÏûàÏúºÎ©¥ skip
                pair_cycle.extend([p1, p2])
                continue
            # 3Ïó∞ÏÜç Ï∂úÏ†Ñ Ï≤¥ÌÅ¨ (Ïù¥Î¶ÑÎ≥ÑÎ°ú ÏµúÍ∑º 2Í≤ΩÍ∏∞ÍπåÏßÄ Í∏∞Î°ù)
            all_players = set(p1) | set(p2)
            all_players.discard("BYE")
            violate = False
            for p in all_players:
                recents = recent_games[p][-2:]
                # Î∞îÎ°ú Ï†Ñ 2Í≤ΩÍ∏∞Ïóê Î™®Îëê Ï∂úÏ†ÑÌñàÎã§Î©¥ 3Ïó∞ÏÜçÏù¥ Îê®
                if len(recents) == 2 and recents[0] == idx-1 and recents[1] == idx-2:
                    violate = True
                    break
            if violate:
                # Ìï¥Îãπ ÌéòÏñ¥Îäî Ïû†Ïãú Îí§Î°ú
                pair_cycle.extend([p1, p2])
                continue
            # OK, Í≤ΩÍ∏∞ ÌôïÏ†ï
            games.append((gtype, p1, p2))
            match_history.append((gtype, p1, p2))
            for p in all_players:
                recent_games[p].append(idx)
            found = True
            break
        if not found:
            # ÎßàÏßÄÎßâÍπåÏßÄ ÏïàÎêòÎ©¥ BYE
            games.append((gtype, ("BYE",), ("BYE",)))

    # ÏΩîÌä∏, ÏãúÍ∞Ñ Ìï†Îãπ
    match_list = []
    for i, (match_type, team1, team2) in enumerate(games):
        court = court_cycle[i % num_courts]
        match_time = base_time + datetime.timedelta(minutes=30*i)
        match_list.append({
            "match_type": match_type,
            "team1": team1,
            "team2": team2,
            "court": court,
            "time": match_time.strftime('%H:%M'),
            "score1": "",
            "score2": ""
        })
    return match_list

# ---------- ÎåÄÏßÑÌëú ÏÉùÏÑ± ----------
if st.button("üéØ Ïú†ÌòïÎ≥Ñ ÎåÄÏßÑÌëú ÏÉùÏÑ±"):
    players = st.session_state.players
    men = [p['name'] for p in players if p['gender'] == "ÎÇ®"]
    women = [p['name'] for p in players if p['gender'] == "Ïó¨"]
    match_list = schedule_matches_with_strict_constraints(
        men, women,
        num_men_doubles, num_women_doubles, num_mixed_doubles,
        num_courts, start_time
    )
    st.session_state.match_list = match_list
    st.session_state.score_record = defaultdict(lambda: {"Ïäπ":0, "Ìå®":0, "ÎìùÏ†ê":0, "Ïã§Ï†ê":0})
    st.success("‚úÖ ÎåÄÏßÑÌëúÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.")
    st.rerun()

# ---------- ÎåÄÏßÑÌëú Î∞è Ï†êÏàò ÏûÖÎ†• ----------
if st.session_state.match_list:
    with st.expander("3. ÎåÄÏßÑÌëú Î∞è Ï†êÏàò ÏûÖÎ†•", expanded=True):
        for idx, match in enumerate(st.session_state.match_list):
            t1 = " + ".join(match['team1']) if isinstance(match['team1'], (tuple, list)) else match['team1']
            t2 = " + ".join(match['team2']) if isinstance(match['team2'], (tuple, list)) else match['team2']
            st.caption(f"{match['match_type']} / ÏΩîÌä∏ {match['court']} / ÏãúÍ∞Ñ {match['time']}")
            col1, col2, col3, col4, col5 = st.columns([3, 1, 1, 1, 3])
            col1.markdown(f"**{t1}**")
            match['score1'] = col2.text_input(" ", key=f"s1_{idx}", label_visibility="collapsed")
            col3.markdown("vs")
            match['score2'] = col4.text_input(" ", key=f"s2_{idx}", label_visibility="collapsed")
            col5.markdown(f"**{t2}**")
        if st.button("‚úÖ Ï†êÏàò Î∞òÏòÅ"):
            for idx, match in enumerate(st.session_state.match_list):
                s1, s2 = match['score1'].strip(), match['score2'].strip()
                if not s1.isdigit() or not s2.isdigit():
                    continue
                s1, s2 = int(s1), int(s2)
                team1 = match['team1'] if isinstance(match['team1'], (tuple, list)) else [match['team1']]
                team2 = match['team2'] if isinstance(match['team2'], (tuple, list)) else [match['team2']]
                for p in team1:
                    if p != "BYE":
                        st.session_state.score_record[p]['ÎìùÏ†ê'] += s1
                        st.session_state.score_record[p]['Ïã§Ï†ê'] += s2
                for p in team2:
                    if p != "BYE":
                        st.session_state.score_record[p]['ÎìùÏ†ê'] += s2
                        st.session_state.score_record[p]['Ïã§Ï†ê'] += s1
                if s1 > s2:
                    for p in team1:
                        if p != "BYE":
                            st.session_state.score_record[p]['Ïäπ'] += 1
                    for p in team2:
                        if p != "BYE":
                            st.session_state.score_record[p]['Ìå®'] += 1
                elif s2 > s1:
                    for p in team2:
                        if p != "BYE":
                            st.session_state.score_record[p]['Ïäπ'] += 1
                    for p in team1:
                        if p != "BYE":
                            st.session_state.score_record[p]['Ìå®'] += 1
            st.success("‚úÖ Ï†êÏàòÍ∞Ä Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§.")

# ---------- Í≤∞Í≥º ÏöîÏïΩ ----------
if st.session_state.score_record and any(st.session_state.score_record.values()):
    with st.expander("üìä Í≤∞Í≥º ÏöîÏïΩ Î∞è Ï¢ÖÌï© MVP", expanded=True):
        stats = []
        for name, r in st.session_state.score_record.items():
            total = r['Ïäπ'] + r['Ìå®']
            rate = f"{r['Ïäπ']/total*100:.1f}%" if total else "0%"
            stats.append((name, r['Ïäπ'], r['Ìå®'], r['ÎìùÏ†ê'], r['Ïã§Ï†ê'], rate))
        df = pd.DataFrame(stats, columns=["Ïù¥Î¶Ñ", "Ïäπ", "Ìå®", "ÎìùÏ†ê", "Ïã§Ï†ê", "ÏäπÎ•†"])
        df = df.sort_values(by=["Ïäπ", "ÎìùÏ†ê"], ascending=[False, False])
        df.index += 1
        st.dataframe(df, use_container_width=True)
        st.bar_chart(df.set_index("Ïù¥Î¶Ñ")["Ïäπ"])
        st.markdown("### üèÖ MVP Top 3")
        for i, row in df.head(3).iterrows():
            medal = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else ""
            st.markdown(f"**{medal} {row['Ïù¥Î¶Ñ']}** - Ïäπ {row['Ïäπ']}, ÏäπÎ•† {row['ÏäπÎ•†']}")
